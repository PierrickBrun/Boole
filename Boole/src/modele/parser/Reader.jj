/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Reader)package modele.parser;

import java.util.*;
import java.lang.*;

import modele.circuit.*;
import modele.*;
import modele.composant.*;


public class Reader{  public static void main(String args []) throws ParseException  {    Reader parser = new Reader(System.in);
    boolean yes = true;    while (yes)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {
       
       _Circuit cir;
       List<_Composant> lComposite= new LinkedList<_Composant>();        switch(Reader.one_line(lComposite))        {          case 0:
          System.out.println("Goodbye");
          yes=false;
          break;
          case 1:
          System.out.println("Ok");
          break;
          default:
          break;
 
         

        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        Reader.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }  }}PARSER_END(Reader)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN:
{< NUM : (< DIGIT >)+>
| < DIGIT : ["0"-"9"]>
}

TOKEN:
{
  < ENTREE : "E"< NUM >>
| < SORTIE: "S"< NUM >>
}
TOKEN :{
    < NOM : (< DIGIT >|<ALPHA1>){1}(< DIGIT >|< ALPHA2 >)+ >
| < ALPHA1 : ["A" - "Z"]>
| < ALPHA2 : ["a" - "z"]>
}
/*Exemples:
 

composite Implique(2,1)
<1|Non->#1(2#1)>
<2|Ou>
[#E1(1#1);#E2(3#12):#S1(12#123)]
circuit Test
<1|Non(1,1){bas}->#1(2#1)>
<2|Non(1,1)->#1(2#1,3#3),#2(1#1)>;;



*/



TOKEN:{

< CIRCUIT : "circuit"|"CIRCUIT">
| < STATE : "bas"|"haut"|"BAS"|"HAUT">
}

TOKEN:
{
  < TEST : "YOLO">}

TOKEN:
{
    < COMPOSITE : "composite"|"COMPOSITE">}





/*Lit un fichier de circuit de la manière suivante :
  Lit O..* Composites
  Lit un circuit.
  Renvoie un circuit executable*/int one_line(List<_Composant> composites) :{}{
 (composite())* < CIRCUIT >circuit()";;"{return 1;}| ";;"{return 0;}
}
void composite() : {}
{
  < COMPOSITE >composite2(){}}

void composite2():{}
{
  < NOM >"("< NUM >","<  NUM >")"(composant())+(specif()){}}

void specif():{}{
  "[" (composEntree())+":"(composSortie())+}

void composEntree():{}
{
 "#"< ENTREE >"("< NUM >"#"< NUM >")"composEntree2(){}}

void composEntree2():{}
{
  ":"
| ";#"< ENTREE >"("< NUM >"#"< NUM >")"}

void composSortie():{}
{
 "#"< SORTIE >"("< NUM >"#"< NUM >")"composSortie2(){}}

void composSortie2():{}
{
  "]"
| ";#"< SORTIE >"("< NUM >"#"< NUM >")"
}


/*Lit le nom, le passe à la lecture des composants*/void circuit():{}{  < NOM >(composant())+{}}

void composant():{}
{
  "<"< NUM >"|"< NOM >("("< NUM >","< NUM >")")?("{"< STATE >"}")?("->")?(sortie())*
}


void sortie():{}
{">"
| "#"< NUM >"("lien()sortie2()
}

void sortie2():{}
{
">"
| ",#"< NUM >"("lien()sortie2()
}

void lien():{}
{ < NUM >"#"< NUM >lien2()
}

void lien2():{}
{")"
| ","< NUM >"#"< NUM >lien2()
}